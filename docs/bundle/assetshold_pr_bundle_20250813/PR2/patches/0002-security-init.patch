*** a/server.js
--- b/server.js
@@
-const session = require('express-session');
+const session = require('express-session');
+const helmet = require('helmet');
+const rateLimit = require('express-rate-limit');
@@
-app.use(session({
-  secret: 'portfolio-secret-key',
-  resave: false,
-  saveUninitialized: false,
-  cookie: { secure: false, httpOnly: true, maxAge: 24 * 60 * 60 * 1000 }
-}));
+const SESSION_SECRET = process.env.SESSION_SECRET;
+if (!SESSION_SECRET) { console.error('SESSION_SECRET is required'); process.exit(1); }
+app.use(helmet());
+app.use(session({
+  secret: SESSION_SECRET,
+  resave: false,
+  saveUninitialized: false,
+  cookie: {
+    httpOnly: true,
+    sameSite: 'lax',
+    secure: process.env.NODE_ENV === 'production',
+    maxAge: 24 * 60 * 60 * 1000
+  }
+}));
+
+const loginLimiter = rateLimit({ windowMs: 60 * 1000, max: 5 });
+app.post('/api/login', loginLimiter, (req, res, next) => next());
@@
-app.post('/api/login', async (req, res) => {
+app.post('/api/login', async (req, res) => {
   // existing login logic
 });
+
+// initial admin setup endpoints (simplified example)
+app.get('/api/setup/status', async (req, res) => {
+  const hasAdmin = await countUsers() > 0;
+  res.json({ adminExists: hasAdmin, setupRequired: !hasAdmin });
+});
+app.post('/api/setup', async (req, res) => {
+  const hasAdmin = await countUsers() > 0;
+  if (hasAdmin) return res.status(400).json({ error: 'already_configured' });
+  const { username, password } = req.body || {};
+  if (!username || !password) return res.status(400).json({ error: 'bad_request' });
+  await createAdminUser(username, password);
+  res.json({ ok: true });
+});
